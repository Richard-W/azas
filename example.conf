azas {

  meta {
    # Title that is displayed in the web-app
    title = "Anmeldung zur Sommer ZaPF Hinterstapfingen 2042"
  }

  database {
    jdbc {
      # Example MySQL configuration:
      #driver = "com.mysql.jdbc.Driver"
      #url = "jdbc:mysql://localhost/azas"
      #user = "root"
      #pass = "somepassword"

      # H2 configuration for testing
      # Saves the database in a single file. You may want to change this
      driver = "org.h2.Driver"
      url = "jdbc:h2:~/azas-database;MODE=MYSQL"
    }
  }

  http {
    # The HTTP port the application listens on. It is strongly recommended, that you
    # use a reverse proxy to connect to this port and add TLS-encryption. Furthermore
    # the port should not be reachable from outside so the proxy is really the only
    # way to connect.
    port = 8080
  }

  api {
    # Whether it is possible to add new participants and mascots
    allowAdd = true

    # Whether it is possible to edit participants and mascots
    allowEdit = true

    # This password is used to get administrative access to all data acquired by azas.
    masterPassword = "changeme"
  }

  # NEVER change this during production as it invalidates the database.
  scheme {
    # Define custom types for api requests
    # There are three primitive types allowed: String, Int and Boolean. You
    # can use these to compose nested types.
    types {
      Address: {
        street: String,
        zipCode: String,
        city: String,
        country: String
      }

      Participant: {
        name: String,
        email: String,
        address: Address,
        excursion: Excursion
      }
    }

    # Define enum types for api requests
    # These are basically strings that are only allowed to have certain values
    enums {
      Excursion: [
        "Option 1",
        "Option 2"
      ]
    }

    # Type that must be used for the info field in participant
    # adding and editing.
    participantType = Participant
  }
}
